---------------------------------------------------------------------------------------------
The following form contains:
Opening: Text that can be replaced
Paragraph 1: Text that can be replaced 
Paragraph 2: Checkboxes that appear selected or unselected (only 1)
Paragraph 3: N/A
Paragraph 4: N/A
Paragraph 5: Paragraphs that can be shown or hidden
Paragraph 6: Table containing list of items
Paragraph 7: Paragraphs that can be shown or hidden, if shown - Table containing list of items
Closing: Checkboxes followed by optional paragraphs

---------------------------------------------------------------------------------------------
Describe which section of the form you think is important to automate:

1) Anything that could be prone to human error, and easy for system to validate
The would include all the text insertions that could be misread from manual verification.

2) Anything that if processed incorrectly would cause the biggest hurdle to the client? 
Missing text - there are placeholders that were not replaced

---------------------------------------------------------------------------------------------
Describe which section of the form you think is more efficient to do Manual test and why:

1) Something that could be hard for a system to populate or validate.
I would say this could include validating the signatures, or the checkboxes.
For example, the sample 'Then' step definition would not fetch 'x' for a given checked box.
This would require additional work to automate, however there is only a few checkboxes and possible options to test for.

2) Visually inspecting table formats are not clunky (i.e. the text wraps nicely)

----------------------------------------------------------------------------------------------

Create 3 different scenarios using Gherkin language:

See test/resources/test.feature for my scenarios
I wanted coverage of text replacement, text insertion, and text removal
I've included both an Include and Deletion test for paragraph 5 to avoid a false positive

I learn best by coding things up and seeing them play out.
test/resources/data:
includes a basic sample schema so I could think about the types of inputs to expect

features/step_definitions/steps.js:
includes a When condition to see one of the ways document might get processed (text replacement)

test/resources/form:
includes the templates we may need to provide

test/resources/result:
includes partially processed forms end results to check with my Then conditions.

One would swap out the code in When condition and have it send the template and json to the system for processing.
I would want to see how I could levarage hooks (@Before, @After, @BeforeAll, @AfterAll) to reduce duplicate setup steps
